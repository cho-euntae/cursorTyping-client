{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/cho-euntae/Desktop/Dev/choeuntae_workspace/cursorTyping/client/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Image from 'next/image';\nconst koreanSentences = [\n  '오늘은 날씨가 참 좋네요.',\n  '나는 매일 아침 커피를 마십니다.',\n  '고양이는 창밖을 바라보고 있어요.',\n  '프론트엔드 개발은 재미있지만 가끔 헷갈려요.',\n  '운동을 하면 기분이 좋아져요.',\n  '모든 일에는 때가 있는 법이죠.',\n  '시간은 누구에게나 공평해요.',\n  '책을 읽는 건 마음의 양식을 쌓는 일이에요.',\n  '지하철은 출근 시간에 너무 혼잡해요.',\n  '저녁 노을이 정말 예쁘네요.',\n];\nexport default function Home() {\n  const [text, setText] = useState('');\n  const [input, setInput] = useState('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [cpm, setCpm] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [roomId, setRoomId] = useState('');\n  const [inputRoomId, setInputRoomId] = useState('');\n  const [_isHost, setIsHost] = useState(false); // 방 생성자 여부 확인 (나중에 추가)\n  const [opponentProgress, setOpponentProgress] = useState({ cpm: 0, wpm: 0, accuracy: 100 });\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [wordCount, setWordCount] = useState(0);\n  const [language, setLanguage] = useState<'ko' | 'en'>('ko');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const socketRef = useRef<any>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const [messages, setMessages] = useState<Array<{ message: string; username: string; timestamp: string }>>([]);\n  const [chatInput, setChatInput] = useState('');\n  const [username, setUsername] = useState('');\n\n  async function getTexts() {\n    console.log(language);\n    if (language === 'ko') {\n      return koreanSentences[Math.floor(Math.random() * koreanSentences.length)];\n    } else {\n      const response = await fetch('https://api.quotable.io/random');\n      const data = await response.json();\n      return data.content;\n    }\n  }\n\n  // useEffect(() => {\n  //   socketRef.current = io(process.env.NEXT_PUBLIC_SOCKET_URL ?? '', {\n  //     path: '/socket.io', // socket 서버의 path가 다르다면 이걸 맞춰야 함\n  //     transports: ['websocket'], // polling 방지\n  //   });\n\n  //   socketRef.current.on('connect', () => {\n  //     console.log('Connected to server');\n  //   });\n\n  //   return () => {\n  //     socketRef.current?.disconnect();\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    const socketURL = process.env.NEXT_PUBLIC_SOCKET_URL;\n    console.log('SOCKET URL:', socketURL);\n    if (!socketURL) {\n      throw new Error('Socket URL이 정의되지 않았습니다!');\n    }\n\n    // Socket.IO 연결\n    socketRef.current = io(socketURL, {\n      path: '/socket.io',\n      transports: ['websocket'],\n    });\n\n    socketRef.current.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    // 새로운 메시지 수신\n    socketRef.current.on('newMessage', (data: { message: string; username: string; timestamp: string }) => {\n      console.log('Received new message:', data);\n      setMessages((prev) => [...prev, data]);\n    });\n\n    // 랜덤 텍스트 선택\n    getTexts().then((text) => setText(text));\n\n    socketRef.current.on('userProgress', (data: any) => {\n      setOpponentProgress({\n        cpm: data.cpm,\n        wpm: data.wpm,\n        accuracy: data.accuracy,\n      });\n    });\n\n    return () => {\n      socketRef.current?.disconnect();\n    };\n  }, []);\n\n  const createRoom = () => {\n    if (!inputRoomId.trim()) {\n      alert('방 ID를 입력해주세요!');\n      return;\n    }\n    const newRoomId = inputRoomId;\n    setRoomId(newRoomId);\n    setIsHost(true);\n    console.log(`createRoom: ${roomId}, socket.id: ${socketRef.current?.id}`);\n\n    socketRef.current?.emit('createRoom', newRoomId);\n    socketRef.current?.emit('joinRoom', newRoomId);\n\n    // 방 생성 시 새로운 랜덤 텍스트 선택\n    getTexts().then((text) => setText(text));\n    setInput('');\n    setStartTime(null);\n    setCpm(0);\n    setWpm(0);\n    setAccuracy(100);\n    setTimeLeft(30);\n    setWordCount(0);\n  };\n\n  const joinRoom = () => {\n    if (inputRoomId) {\n      socketRef.current?.emit('joinRoom', inputRoomId);\n      setRoomId(inputRoomId);\n      setIsHost(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (!startTime) {\n      setStartTime(Date.now());\n      startTimer();\n      socketRef.current?.emit('startTyping', roomId);\n    }\n\n    // 단어 수 카운트 (공백으로 구분)\n    const words = value.trim().split(/\\s+/).length;\n    setWordCount(words);\n\n    setInput(value);\n\n    // Calculate accuracy\n    const correctChars = value.split('').filter((char, i) => char === text[i]).length;\n    const accuracy = (correctChars / value.length) * 100;\n    setAccuracy(Math.round(accuracy));\n\n    // Calculate CPM\n    if (startTime) {\n      const timeElapsed = (Date.now() - startTime) / 60000;\n      const currentCpm = Math.round(value.length / timeElapsed);\n      setCpm(currentCpm);\n      const currentWpm = Math.round(value.length / timeElapsed);\n      setWpm(currentWpm);\n\n      // Send progress to other players\n      socketRef.current?.emit('typingProgress', {\n        roomId,\n        progress: value.length / text.length,\n        cpm: currentCpm,\n        wpm: currentWpm,\n        accuracy: Math.round(accuracy),\n      });\n    }\n  };\n\n  const menu = ['타이핑 테스트', '키 스트로크 연습', '고급'];\n  const menus = () => {\n    return menu.map((item, index) => (\n      <li className='p-2 flex relative center cursor-pointer' key={index}>\n        <a>{item}</a>\n      </li>\n    ));\n  };\n\n  useEffect(() => {\n    if (input.length === text.length) {\n      // 타이핑 완료 알림\n      alert(`타이핑 완료!\\n타이핑 속도: ${cpm}타/분\\n정확도: ${accuracy}%\\n총 타이핑 속도: ${wpm}타/분`);\n\n      // 상태 초기화\n      setInput('');\n      setStartTime(null);\n      setCpm(0);\n      setWpm(0);\n      setAccuracy(100);\n\n      // 새로운 랜덤 텍스트 선택\n      getTexts().then((text) => setText(text));\n    }\n  }, [input, text]);\n\n  useEffect(() => {\n    if (timeLeft === 0) {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      alert(`시간 종료!\\n총 입력한 단어 수: ${wordCount}\\n타이핑 속도: ${cpm}타/분\\n정확도: ${accuracy}%`);\n      setInput('');\n      setStartTime(null);\n      setCpm(0);\n      setWpm(0);\n      setAccuracy(100);\n      setTimeLeft(30);\n      setWordCount(0);\n      getTexts().then((text) => setText(text));\n    }\n  }, [timeLeft]);\n\n  const startTimer = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    setTimeLeft(30);\n    timerRef.current = setInterval(() => {\n      setTimeLeft((prev) => prev - 1);\n    }, 1000);\n  };\n\n  const toggleLanguage = () => {\n    setLanguage((prev) => (prev === 'ko' ? 'en' : 'ko'));\n    getTexts().then((text) => setText(text));\n    setInput('');\n    setStartTime(null);\n    setCpm(0);\n    setWpm(0);\n    setAccuracy(100);\n    setTimeLeft(30);\n    setWordCount(0);\n  };\n\n  const sendMessage = () => {\n    if (chatInput.trim() && username.trim() && roomId) {\n      console.log('Sending message:', { roomId, message: chatInput, username });\n      socketRef.current?.emit('chatMessage', {\n        roomId,\n        message: chatInput,\n        username,\n      });\n      setChatInput('');\n    }\n  };\n\n  return (\n    <>\n      <header className='flex h-[60] px-10 w-full center'>\n        <div className='logo flex center'>\n          <a href='/' className='flex items-center'>\n            <Image className='block' src='/typing_logo.png' alt='Logo' width={50} height={50} />\n            <span className='font-bold text-2xl'>Typing Speed Test</span>\n          </a>\n        </div>\n        <div className='flex-1 menu ml-10 items-center h-full'>\n          <ul className='flex min-w-[300px] h-full items-center font-600 list-none'>{menus()}</ul>\n        </div>\n        <div className='flex items-center'>\n          <button onClick={toggleLanguage} className='px-4 py-2 bg-gray-500 text-white rounded-lg'>\n            {language === 'ko' ? '한국어' : 'English'}\n          </button>\n        </div>\n      </header>\n\n      <div className='grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]'>\n        <main className='flex flex-col gap-8 row-start-2 items-center sm:items-start'>\n          {/* <Image className='dark:invert' src='/next.svg' alt='Next.js logo' width={180} height={38} priority />\n          <ol className='list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]'>\n            <li className='mb-2'>\n              Get started by editing{' '}\n              <code className='bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold'>app/page.tsx</code>\n              .\n            </li>\n            <li>Save and see your changes instantly.</li>\n          </ol>\n\n          <div className='flex gap-4 items-center flex-col sm:flex-row'></div> */}\n\n          <div className='z-10 max-w-5xl w-full items-center justify-between font-mono text-sm'>\n            <h1 className='text-4xl font-bold mb-8 text-center'>Test</h1>\n\n            {!roomId && (\n              <div className='flex gap-4 mb-8'>\n                <button onClick={createRoom} className='px-4 py-2 bg-blue-500 text-white rounded-lg'>\n                  방 만들기\n                </button>\n                <div className='flex gap-2'>\n                  <input\n                    type='text'\n                    value={inputRoomId}\n                    onChange={(e) => setInputRoomId(e.target.value)}\n                    placeholder='방 ID 입력'\n                    className='px-4 py-2 border rounded-lg'\n                  />\n                  <button onClick={joinRoom} className='px-4 py-2 bg-green-500 text-white rounded-lg'>\n                    참가하기\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {roomId && (\n              <>\n                <div className='mb-4 text-center'>\n                  <div className='text-2xl font-bold'>{timeLeft}초</div>\n                  <div className='text-lg'>입력한 단어 수: {wordCount}</div>\n                </div>\n\n                <div className='mb-8 p-4 border rounded-lg bg-gray-50 w-full max-w-2xl h-32 overflow-y-auto'>\n                  <p className='text-lg whitespace-pre-wrap'>\n                    {text.split('').map((char, index) => {\n                      let className = '';\n                      if (index < input.length) {\n                        className = input[index] === char ? 'text-green-500' : 'text-red-500';\n                      }\n                      return (\n                        <span key={index} className={className}>\n                          {char}\n                        </span>\n                      );\n                    })}\n                  </p>\n                </div>\n\n                <div className='flex justify-center mb-8 w-full max-w-2xl'>\n                  <input\n                    ref={inputRef}\n                    type='text'\n                    value={input}\n                    onChange={handleInputChange}\n                    className='w-full p-2 border rounded-lg'\n                    placeholder='여기에 입력하세요...'\n                  />\n                </div>\n\n                <div className='grid grid-cols-2 gap-8 text-lg'>\n                  <div>\n                    <h2 className='font-bold mb-2'>나의 통계</h2>\n                    <div>타이핑 속도: {cpm}타/분</div>\n                    <div>총 타이핑 속도: {wpm}타/분</div>\n                    <div>정확도: {accuracy}%</div>\n                  </div>\n                  <div>\n                    <h2 className='font-bold mb-2'>상대방 통계</h2>\n                    <div>타이핑 속도: {opponentProgress.cpm}타/분</div>\n                    <div>총 타이핑 속도: {opponentProgress.wpm}타/분</div>\n                    <div>정확도: {opponentProgress.accuracy}%</div>\n                  </div>\n                </div>\n\n                {/* 채팅 UI 추가 */}\n                <div className='fixed bottom-4 right-4 w-80 bg-white rounded-lg shadow-lg p-4'>\n                  <div className='mb-4'>\n                    <input\n                      type='text'\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      placeholder='사용자 이름'\n                      className='w-full p-2 border rounded-lg mb-2'\n                    />\n                    <div className='h-48 overflow-y-auto mb-2 border rounded-lg p-2'>\n                      {messages.map((msg, index) => (\n                        <div key={index} className='mb-2'>\n                          <span className='font-bold'>{msg.username}: </span>\n                          <span>{msg.message}</span>\n                          <span className='text-xs text-gray-500 ml-2'>\n                            {new Date(msg.timestamp).toLocaleTimeString()}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                    <div className='flex gap-2'>\n                      <input\n                        type='text'\n                        value={chatInput}\n                        onChange={(e) => setChatInput(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                        placeholder='메시지를 입력하세요...'\n                        className='flex-1 p-2 border rounded-lg'\n                      />\n                      <button onClick={sendMessage} className='px-4 py-2 bg-blue-500 text-white rounded-lg'>\n                        전송\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        </main>\n        <footer className='row-start-3 flex gap-6 flex-wrap items-center justify-center'>Footer</footer>\n      </div>\n    </>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 755, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}